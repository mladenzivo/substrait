%YAML 1.1
---
fragments:
  - &Prec { range: [1, 39] }
  - &Scale { range: [0, 30] }
  - &ScalarNumber { types: [i8, i16, i32, i64, fp32, fp64] }
  - &StringsL1 { types: ["VARCHAR<L1>", "FIXEDCHAR<L1>", "STRING"] }
  - &BinariesL1 { types: ["BINARY", "FIXEDBINARY<L1>"] }
  - &StringsL2 { types: ["VARCHAR<L2>", "FIXEDCHAR<L2>", "STRING"] }
  - &BinariesL2 { types: ["BINARY", "FIXEDBINARY<L2>"] }
  - &Decimal1 DECIMAL<P1,S1>
  - &Decimal2 DECIMAL<P2,S2>
  - &NumericOverflow
    options: [SILENT, SATURATE, ERROR]
    required: false
  - &BinaryScalarNumericArgs
    bounds:
      K: { types: [i8, i16, i32, i64, fp32, fp64] }
    arguments:
      - *NumericOverflow
      - value: K
      - value: K
  - &BinaryDecimalNumericArgs
    bounds:
      P1: *Prec
      S1: *Scale
      P2: *Prec
      S2: *Scale
    arguments:
      - *NumericOverflow
      - value: DECIMAL<P1,S1>
      - value: DECIMAL<P2,S2>
  - &SimpleComparisons
    nullability: DECLARED_OUTPUT
    bounds:
      K: { types: [boolean, i8, i16, i32, i64, fp32, fp64, timestamp, timestamp_tz, date, time] }
    arguments:
      - value: K
      - value: K
    return: boolean
  - &StringComparisons
    nullability: DECLARED_OUTPUT
    bounds:
      S1: *StringsL1
      S2: *StringsL2
    arguments:
      - value: S1
      - value: S2
    return: boolean
  - &BinaryComparisons
    nullability: DECLARED_OUTPUT
    bounds:
      S1: *BinariesL1
      S2: *BinariesL2
    arguments:
      - value: S1
      - value: S2
    return: boolean
  - &UnorderedComparisons
    nullability: DECLARED_OUTPUT
    bounds:
      K: { types: [uuid, interval_year, interval_day] }
    arguments:
      - value: K
      - value: K
    return: boolean
  - &BinaryBoolean
    arguments:
      - value: boolean
      - value: boolean
    return: boolean
scalar_functions:
  - info: &add
      name: "+"
      description: "Add two numeric values."
    <<: *BinaryScalarNumericArgs
    return: K

  - info: *add
    <<: *BinaryDecimalNumericArgs
    return: |-
      init_scale = max(S1,S2)
      init_prec = init_scale + max(P1 - S1, P2-S2) + 1
      min_scale = min(init_scale, 6)
      delta = init_prec - 38
      prec = min(init_prec,38)
      scale = init_prec > 38 ? scale - init_prec + 38 : min_scale
      DECIMAL<prec, scale>

  - info:
      name: "+"
      description: Add an interval to a date/time type.
    bounds:
      T: { types: [timestamp, timestamp_tz, date] }
      I: { types: [interval_year, interval_day] }
    arguments:
      - value: T
      - value: I
    return: T

  - info: &minus
      name: "-"
      description: "Subtract one operand from another."
    <<: *BinaryScalarNumericArgs
    return: K
  - info: *minus
    <<: *BinaryDecimalNumericArgs
    return: |-
      init_scale = max(S1,S2)
      init_prec = init_scale + max(P1 - S1, P2-S2) + 1
      min_scale = min(init_scale, 6)
      delta = init_prec - 38
      prec = min(init_prec,38)
      scale = init_prec > 38 ? scale - init_prec + 38 : min_scale
      DECIMAL<prec, scale>

  - info: &mulitply
      name: "*"
      description: Multiply two numeric values.
    <<: *BinaryScalarNumericArgs
    return: K
  - info: *mulitply
    <<: *BinaryDecimalNumericArgs
    return: |-
      init_scale = S1 + S2
      init_prec = P1 + P2 + 1
      min_scale = min(init_scale, 6)
      delta = init_prec - 38
      prec = min(init_prec,38)
      scale = init_prec > 38 ? scale - init_prec + 38 : min_scale
      DECIMAL<prec, scale>

  - info: &divide
      name: "/"
      description: "Divide two numeric values."
    <<: *BinaryScalarNumericArgs
    return: K
  - info: *divide
    <<: *BinaryDecimalNumericArgs
    return: |-
      init_scale = max(6, S1 + P2 + 1)
      init_prec = P1 - S1 + P2 + init_scale
      min_scale = min(init_scale, 6)
      delta = init_prec - 38
      prec = min(init_prec,38)
      scale = init_prec > 38 ? scale - init_prec + 38 : min_scale
      DECIMAL<prec, scale>

  - info: &modulus
      name: ["mod", "%"]
      description: "Modulus of two values."
    <<: *BinaryScalarNumericArgs
    return: K
  - info: *modulus
    <<: *BinaryDecimalNumericArgs
    return: |-
      init_scale = max(S1,S2)
      init_prec = min(P1 - S1, P2 - S2) + init_scale
      min_scale = min(init_scale, 6)
      delta = init_prec - 38
      prec = min(init_prec,38)
      scale = init_prec > 38 ? scale - init_prec + 38 : min_scale
      DECIMAL<prec, scale>

  - info:
      name: like
      description: Determine whether a string matches a particular pattern using SQL standard like syntax.
    bounds:
      S1: *StringsL1
      S2: *StringsL2
    arguments:
      - value: S1
        name: value to test
      - value: S2
        name: pattern
        constant: true
    return: boolean

  - info: &equals
      name: "="
      description: Whether two values are equal.
    <<: *SimpleComparisons
  - info: *equals
    <<: *StringComparisons
  - info: *equals
    <<: *BinaryComparisons
  - info: *equals
    <<: *UnorderedComparisons

  - info: &isnotdistinctfrom
      name: "is_not_distinct_from"
      description: Whether two values are equal (nulls are considered equal).
    <<: *SimpleComparisons
  - info: *isnotdistinctfrom
    <<: *StringComparisons
  - info: *isnotdistinctfrom
    <<: *BinaryComparisons
  - info: *isnotdistinctfrom
    <<: *UnorderedComparisons

  - info: &notequal
      name: ["!=", "<>"]
      description: Whether two values are not equal.
    <<: *SimpleComparisons
  - info: *notequal
    <<: *StringComparisons
  - info: *notequal
    <<: *BinaryComparisons
  - info: *notequal
    <<: *UnorderedComparisons

  - info: &lt
      name: "<"
      description: Whether the first value is less than the second value.
    <<: *SimpleComparisons
  - info: *lt
    <<: *StringComparisons
  - info: *lt
    <<: *BinaryComparisons

  - info: &lteq
      name: "<="
      description: Whether the first value is less than or equal to the second value.
    <<: *SimpleComparisons
  - info: *lteq
    <<: *StringComparisons
  - info: *lteq
    <<: *BinaryComparisons

  - info: &gt
      name: ">"
      description: Whether the first value is greater than the second value.
    <<: *SimpleComparisons
  - info: *lteq
    <<: *StringComparisons
  - info: *lteq
    <<: *BinaryComparisons

  - info: &gteq
      name: ">="
      description: Whether the first value is greater than or equal to the second value.
    <<: *SimpleComparisons
  - info: *gteq
    <<: *StringComparisons
  - info: *gteq
    <<: *BinaryComparisons

  - info: &Compare
      name: compare
      description: |-
        Whether the first value is greater than, less than or equal to the second value. Returns -1 if first
        value is less than second, 0 if the two values are equal or 1 if the first value is greater than the second.
    bounds:
      K: { types: [boolean, i8, i16, i32, i64, fp32, fp64, timestamp, timestamp_tz, date, time, interval_year] }
    arguments:
      - &NullOrdering
        options: [FIRST, LAST]
        name: Nulls Ordering
        required: false
      - value: K
      - value: K
    return: i8
  - info: *Compare
    bounds:
      S1: *StringsL1
      S2: *StringsL2
    arguments:
      - *NullOrdering
      - value: S1
      - value: S2
    return: i8

  - info: &Cast
      name: cast
      description: Convert value to a string.
    nullability: DISCRETE
    bounds:
      V:
        {
          types:
            [
              boolean,
              i8,
              i16,
              i32,
              i64,
              fp32,
              fp64,
              timestamp_tz,
              date,
              time,
              interval_year,
              interval_day,
              "boolean?",
              "i8?",
              "i16?",
              "i32?",
              "i64?",
              "fp32?",
              "fp64?",
              "timestamp_tz?",
              "date?",
              "time?",
              "interval_year?",
              "interval_day?",
            ],
        }
      S: { types: [VARCHAR<N>, FIXEDCHAR<N>, STRING, "VARCHAR<N>?", "FIXEDCHAR<N>?", "STRING?"] }
    arguments:
      - type: S
        name: Target type.
      - value: V
        name: Value to cast.
  - info:
      name: extract
      description: Extract portion of a date/time value.
    bounds:
      D: { types: [timestamp, timestamp_tz, date, time] }
    arguments:
      - options: [YEAR, MONTH, DAY, SECOND]
        name: The part of the value to extract.
        required: true
      - value: D
        name: Date/time value to extract information from.
    return: i64
  - info:
      name: not
      description: The boolean not of a provided value
    arguments:
      - value: boolean
    return: boolean
  - info:
      name: and
      description: The boolean and of two values.
    <<: *BinaryBoolean
  - info:
      name: or
      description: The boolean or of two values.
    <<: *BinaryBoolean
  - info:
      name: xor
      description: The boolean xor of two values.
    <<: *BinaryBoolean

  - info: &Concat
      name: concat
      description: Concatenate two strings
    arguments:
      - value: FIXEDCHAR<L1>
      - value: FIXEDCHAR<L2>
    return: FIXEDCHAR<L1 + L2>
  - info: *Concat
    bounds:
      S1: *StringsL1
      S2: *StringsL2
    arguments:
      - value: S1
      - value: S2
    return: VARCHAR<L1 + L2>
  - info: *Concat
    bounds:
      S1: *StringsL1
      S2: *StringsL2
    arguments:
      - value: S1
      - value: S2
    return: string
  - info: *Concat
    arguments:
      - value: FIXEDBINARY<L1>
      - value: FIXEDBINARY<L2>
    return: FIXEDBINARY<L1 + L2>
  - info: *Concat
    bounds:
      S1: *BinariesL1
      S2: *BinariesL2
    arguments:
      - value: S1
      - value: S2
    return: binary
  - info:
      name: substring
      description: Get a sub portion of the given string.
    bounds:
      S: *StringsL1
    arguments:
      - value: S
        name: String to extract from.
      - value: i32
        name: Start position (inclusive, zero index). Negatives starts from end of string.
      - value: i32
        name: End position (exclusive, zero index). Negative starts from end of string.
